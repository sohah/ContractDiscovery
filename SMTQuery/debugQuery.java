  (set-logic QF_BV)
  (set-option :produce-unsat-cores true)

  (declare-fun w17$2 () (_ BitVec 32))
  (declare-fun x () (_ BitVec 32))
  (declare-fun y () (_ BitVec 32))
  (declare-fun |r348[0].1.3.1| () (_ BitVec 32))
  (declare-fun w18$2 () (_ BitVec 32))
  (declare-fun w15$2 () (_ BitVec 32))
  (declare-fun w16$2 () (_ BitVec 32))
  (declare-fun |r348[0].1.2.2| () (_ BitVec 32))
  (declare-fun |r348[0].1.3.2| () (_ BitVec 32))
  (declare-fun |r348[0].1.3| () (_ BitVec 32))
  (declare-fun |r348[1].1.3| () (_ BitVec 32))
  (declare-fun w12$2 () (_ BitVec 32))
  (declare-fun w13$2 () (_ BitVec 32))
  (declare-fun |r348[0].1.1.1| () (_ BitVec 32))
  (declare-fun w10$2 () (_ BitVec 32))
  (declare-fun w11$2 () (_ BitVec 32))
  (declare-fun |r348[0].1.2.1| () (_ BitVec 32))
  (declare-fun |r348[0].1.1.2| () (_ BitVec 32))
  (declare-fun w12$1 () (_ BitVec 32))
  (declare-fun w13$1 () (_ BitVec 32))
  (declare-fun w10$1 () (_ BitVec 32))
  (declare-fun w11$1 () (_ BitVec 32))
  
  (assert (let ((a!1 (or (and (= #x00000000 #x00000000)
                      (= y #x00000000)
                      (= |r348[0].1.3.2| |r348[0].1.1.2|))
                 (and (= #x00000000 #x00000000)
                      (not (= y #x00000000))
                      (= |r348[0].1.3.2| |r348[0].1.2.2|))))
        (a!2 (or (and (= y #x00000000)
                      (= |r348[0].1.3| |r348[0].1.1.2|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (not (= y #x00000000))
                      (= |r348[0].1.3| |r348[0].1.2.2|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000000))
                      (= |r348[0].1.3| |r348[0].1.3.1|))))
        (a!3 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (= y #x00000000)
                      (= |r348[1].1.3| |r348[0].1.1.2|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (not (= y #x00000000))
                      (= |r348[1].1.3| |r348[0].1.2.2|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000001))
                      (= |r348[1].1.3| #x00000001)))))
    (and (= w17$2 |r348[0].1.3.1|)
         (= w18$2 (bvadd #x00000002 w17$2))
         (= |r348[0].1.1.2| w18$2)
         (= w15$2 |r348[0].1.3.1|)
         (= w16$2 (bvadd #x00000004 w15$2))
         (= |r348[0].1.2.2| w16$2)
         a!1
         a!2
         a!3 )))
  (assert (let ((a!1 (and (and (= #x00000000 #x00000000) (not (= y #x00000000)))
                  (= |r348[0].1.3.2| |r348[0].1.2.2|)))
        (a!3 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (= y #x00000000)
                      (= |r348[0].1.3| |r348[0].1.1.2|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (not (= y #x00000000))
                      (= |r348[0].1.3| |r348[0].1.2.2|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000000))
                      (= |r348[0].1.3| |r348[0].1.3.1|))))
        (a!4 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (= y #x00000000)
                      (= |r348[1].1.3| |r348[0].1.1.2|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (not (= y #x00000000))
                      (= |r348[1].1.3| |r348[0].1.2.2|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000001))
                      (= |r348[1].1.3| #x00000001))))
        (a!5 (and (and (= #x00000000 #x00000000) (not (= y #x00000000)))
                  (not (and (bvslt #x00000000 #x00000002)
                            (bvsge #x00000000 #x00000000)))))
        (a!6 (and (and (= #x00000000 #x00000000) (= y #x00000000))
                  (not (and (bvslt #x00000000 #x00000002)
                            (bvsge #x00000000 #x00000000))))))
  (let ((a!2 (or (and (and (= #x00000000 #x00000000) (= y #x00000000))
                      (= |r348[0].1.3.2| |r348[0].1.1.2|))
                 a!1)))
    (and (= w17$2 |r348[0].1.3.1|)
         (= w18$2 (bvadd #x00000002 w17$2))
         (= |r348[0].1.1.2| w18$2)
         (= w15$2 |r348[0].1.3.1|)
         (= w16$2 (bvadd #x00000004 w15$2))
         (= |r348[0].1.2.2| w16$2)
         a!2
         a!3
         a!4
         (not (or (= #x00000000 #x00000001) a!5 a!6))))))
  (assert (let ((a!1 (or (and (= #x00000000 #x00000000)
                      (= x #x00000000)
                      (= |r348[0].1.3.1| |r348[0].1.1.1|))
                 (and (= #x00000000 #x00000000)
                      (not (= x #x00000000))
                      (= |r348[0].1.3.1| |r348[0].1.2.1|))))
        (a!2 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (= x #x00000000)
                      (= |r348[0].1.3| |r348[0].1.1.1|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (not (= x #x00000000))
                      (= |r348[0].1.3| |r348[0].1.2.1|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000000))
                      (= |r348[0].1.3| #x00000000))))
        (a!3 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (= x #x00000000)
                      (= |r348[1].1.3| |r348[0].1.1.1|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (not (= x #x00000000))
                      (= |r348[1].1.3| |r348[0].1.2.1|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000001))
                      (= |r348[1].1.3| #x00000001)))))
    (and (= w12$1 #x00000000)
         (= w13$1 (bvadd #x00000002 w12$1))
         (= |r348[0].1.1.1| w13$1)
         (= w10$1 #x00000000)
         (= w11$1 (bvadd #x00000003 w10$1))
         (= |r348[0].1.2.1| w11$1)
         a!1
         a!2
         a!3)))
  (assert (let ((a!1 (and (and (= #x00000000 #x00000000) (not (= x #x00000000)))
                  (= |r348[0].1.3.1| |r348[0].1.2.1|)))
        (a!3 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (= x #x00000000)
                      (= |r348[0].1.3| |r348[0].1.1.1|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000000))
                      (not (= x #x00000000))
                      (= |r348[0].1.3| |r348[0].1.2.1|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000000))
                      (= |r348[0].1.3| #x00000000))))
        (a!4 (or (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (= x #x00000000)
                      (= |r348[1].1.3| |r348[0].1.1.1|))
                 (and (and (= #x00000000 #x00000000) (= #x00000000 #x00000001))
                      (not (= x #x00000000))
                      (= |r348[1].1.3| |r348[0].1.2.1|))
                 (and (= #x00000000 #x00000000)
                      (not (= #x00000000 #x00000001))
                      (= |r348[1].1.3| #x00000001))))
        (a!5 (and (and (= #x00000000 #x00000000) (not (= x #x00000000)))
                  (not (and (bvslt #x00000000 #x00000002)
                            (bvsge #x00000000 #x00000000)))))
        (a!6 (and (and (= #x00000000 #x00000000) (= x #x00000000))
                  (not (and (bvslt #x00000000 #x00000002)
                            (bvsge #x00000000 #x00000000))))))
  (let ((a!2 (or (and (and (= #x00000000 #x00000000) (= x #x00000000))
                      (= |r348[0].1.3.1| |r348[0].1.1.1|))
                 a!1)))
    (and (= w12$1 #x00000000)
         (= w13$1 (bvadd #x00000002 w12$1))
         (= |r348[0].1.1.1| w13$1)
         (= w10$1 #x00000000)
         (= w11$1 (bvadd #x00000003 w10$1))
         (= |r348[0].1.2.1| w11$1)
         a!2
         a!3
         a!4
         (not (or (= #x00000000 #x00000001) a!5 a!6))))))


(check-sat)
;(get-model)
(get-unsat-core)
(exit)
