public class TestPaths extends java.lang.Object
{

    public void <init>()
    {
        TestPaths r0;

        r0 := @this: TestPaths;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.io.PrintStream $r1;
        TestPaths $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("!!!!!!!!!!!!!!! Start Testing! ");

        $r2 = new TestPaths;

        specialinvoke $r2.<TestPaths: void <init>()>();

        virtualinvoke $r2.<TestPaths: void testMe3(int,int)>(0, 0);

        return;
    }

    public void testMe3(int, int)
    {
        TestPaths r0;
        int i0, i1, $i2, $i3, $i4, i5, $i9, i5_1, i5_2;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        java.io.PrintStream $r2, $r8;
        java.lang.String $r7;
        byte b6, b7, b8, b10;
        boolean z0, z1, z2, z3;

        r0 := @this: TestPaths;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x = ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

        i5 = staticinvoke <gov.nasa.jpf.symbc.Debug: int makeSymbolicInteger(java.lang.String)>("i");

        b6 = 11;

(0)     b7 = 12;

     label1:
        i5_1 = Phi(i5 #0, i5_2 #1);

        if i5_1 >= 1 goto label8;

        $i2 = i0 + i5_1;

        if $i2 >= 0 goto label2;

        b8 = -1;

        goto label4;

     label2:
        $i3 = i0 + i5_1;

        if $i3 != 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        z1 = 1;

     label4:
        $i9 = i1 + i5_1;

        if $i9 >= 0 goto label5;

        b10 = -1;

        goto label7;

     label5:
        $i4 = i1 + i5_1;

        if $i4 != 0 goto label6;

        z2 = 0;

        goto label7;

     label6:
        z3 = 1;

     label7:
        i5_2 = i5_1 + 1;

(1)     goto label1;

     label8:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("-x-x-x-x-");

        return;
    }

    public static void testMe(int, boolean)
    {
        int i0;
        boolean z0, z1, z2;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.io.PrintStream $r1;
        java.lang.String $r4;
        byte b1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);

        z1 = 0;

        if i0 > 1200 goto label1;

        b1 = -1;

     label1:
        if i0 < 1200 goto label2;

        z2 = 1;

     label2:
        return;
    }

    public void testMe2(int, boolean)
    {
        TestPaths r0;
        int i0;
        boolean z0;
        java.io.PrintStream $r1, $r2, $r3, $r4;

        r0 := @this: TestPaths;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("!!!!!!!!!!!!!!! First step! ");

        if z0 == 0 goto label2;

        if i0 > 1200 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("  <= 1200");

     label1:
        if i0 < 1200 goto label3;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("  >= 1200");

        goto label3;

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("  b is false");

     label3:
        return;
    }
}
